apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.kryptkode.footballfixtures"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary true
        multiDexEnabled true

        buildConfigField("String", "BASE_URL", "\"https://api.football-data.org/v2/\"")
        buildConfigField("String", "API_TOKEN", "\"3d373f599d4047bb95b8f20fa1dd16b5\"")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //Android Kotlin extensions
    implementation "androidx.core:core-ktx:$ktxVersion"

    //coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutineVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVersion"

    //appcompat
    implementation "androidx.appcompat:appcompat:$supportLibVersion"

    //multiDex
    implementation "androidx.multidex:multidex:$multiDexVersion"

    //constraint
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"

    //material
    implementation "com.google.android.material:material:$materialLibVersion"

    // architecture components
    implementation "androidx.lifecycle:lifecycle-extensions:$archComponentsVersion"
    implementation "androidx.lifecycle:lifecycle-runtime:$archComponentsVersion"
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.paging:paging-runtime:$pagingVersion"
    kapt "androidx.lifecycle:lifecycle-compiler:$archComponentsVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.retrofit2:retrofit-mock:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpLoggingInterceptorVersion"

    //gson
    //Radio
    implementation "com.google.code.gson:gson:$gsonVersion"

    //rx
    implementation "io.reactivex.rxjava2:rxandroid:$rxVersion"


    //dagger
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"


    //timber
    implementation "com.jakewharton.timber:timber:$timberVersion"


    //leakcanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"


    //shimmer
    implementation "com.facebook.shimmer:shimmer:$shimmerVersion"

    //imageloader
    implementation project(":imageloader")

    // unit testing
    testImplementation "junit:junit:$junitVersion"
    testImplementation "android.arch.core:core-testing:$coreTesting"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    //instrumentation testing
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    androidTestImplementation "androidx.test:runner:$runnerVersion"
    androidTestImplementation "android.arch.core:core-testing:$coreTesting"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test:runner:$testRunner"
    androidTestImplementation "androidx.test:rules:$testRunner"
    androidTestImplementation "androidx.test.ext:junit:$androidJunit"
    androidTestImplementation 'android.arch.persistence.room:testing:1.1.1'
}
